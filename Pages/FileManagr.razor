@page "/"
@inject IJSRuntime JsRuntime
@inject FileManagerService fileManagerService
@inject IToastService toastService

<BSModal @ref="ConfirmationModal">
    <BSModalHeader OnClick="@(() => ConfirmationModal.Hide())">Confirmation</BSModalHeader>
    <BSModalBody><p>Are you sure you want to delete this folder ?</p></BSModalBody>
    <BSModalFooter>
        <BSButton Color="Color.Danger" OnClick="DeleteConfirm">Yes</BSButton>
        <BSButton Color="Color.Success" OnClick="@(() => ConfirmationModal.Hide())">No</BSButton>
    </BSModalFooter>
</BSModal>
<BSModal @ref="UploadModal">
    <BSModalHeader OnClick="@(() => UploadModal.Hide())"></BSModalHeader>
    <BSModalBody>
        <Upload @ref="myUpload" @key="myUpload" filePath="@filePath" onUploadFinished="finishUpload"></Upload>
    </BSModalBody>
</BSModal>

    <div class="container-fluid custom-bg py-4" id="fileManager">
        <div class="container">
            <div class="mt-5 mb-3 ml-0">
                <div class="row">
                    @if (currentDir != null)
                    {
                        if (isFolder)
                        {
                            <div class="col-12 col-sm-6 col-md-3 mt-0 mt-2">
                                <button class="btn btn-white" @onclick="@(() => prepareCreateDir(currentDir))">Create a directory&nbsp;<img src="/img/FileManager/ActionIcons/addDir.png" /></button>
                            </div>

                            <div class="col-12 col-sm-6 col-md-3 mt-0 mt-2">
                                <button class="btn btn-white" @onclick="@(() => uploadFile(currentDir))">Upload a file&nbsp;<img src="/img/FileManager/ActionIcons/addFile.png" /></button>
                            </div>

                            if (!currentDir.isRootNode)
                            {
                                <div class="col-12 col-sm-6 col-md-3 mt-0 mt-2">
                                    <button class="btn btn-white" @onclick="@(() => prepareRenameDir(currentDir))">Rename a directory&nbsp;<img src="/img/FileManager/ActionIcons/renameDir.png" /></button>
                                </div>
                            }
                            if (!currentDir.isRootNode)
                            {
                                <div class="col-12 col-sm-6 col-md-3 mt-0 mt-2">
                                    <button class="btn btn-white" @onclick="@(() => deleteDir(currentDir))">Delete a directory&nbsp;<img src="/img/FileManager/ActionIcons/removeDir.png" /></button>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="col-12 col-sm-6 col-md-3 mt-2">
                                <button class="btn btn-white" @onclick="@(() => prepareCreateDir(currentDir))">Create a directory&nbsp;<img src="/img/FileManager/ActionIcons/addDir.png" /></button>
                            </div>

                            <div class="col-12 col-sm-6 col-md-3 mt-0 mt-2">
                                <button class="btn btn-white" @onclick="@(() => uploadFile(currentDir))">Upload a file&nbsp;<img src="/img/FileManager/ActionIcons/addFile.png" /></button>
                            </div>

                            <div class="col-12 col-sm-6 col-md-3 mt-0 mt-2">
                                <button cl="btn btn-white" @onclick="@(() => downloadFile(currentFile))" class="btn btn-white">Download file&nbsp;<img src="/img/FileManager/ActionIcons/dowloadFile.png" /></button>
                            </div>

                            <div class="col-12 col-sm-6 col-md-3 mt-0 mt-2">
                                <button class="btn btn-white" @onclick="@(() => prepareRenameFile(currentFile))">Rename file&nbsp;<img src="/img/FileManager/ActionIcons/renameDir.png" /></button>
                            </div>

                            <div class="col-12 col-sm-6 col-md-3 mt-0 mt-2">
                                <button class="btn btn-white" @onclick="@(() => deleteFile(currentFile))">Delete file&nbsp;<img src="/img/FileManager/ActionIcons/removeDir.png" /></button>
                            </div>

                        }
                    }
                    </div>
            </div>
            <div id="treeView" class="custom-bg-white">
                <div id="help" class="w-25 float-right custom-bg-white p-3 font-italic font-weight-bold d-none d-sm-block"><i class="fa fa-question-circle"></i>Select an action with right click. To move a directory/file you can use drag and drop.</div>
                <TreeView Directories="directories"
                          onSelectFile="selectFile"
                          onDeleteFile="deleteFile"
                          onRenameFile="renameFile"
                          onDownloadFile="downloadFile"
                          onUploadFile="uploadFile"
                          onDragAndDropFile="dragAndDropFile"
                          onSelectDirectory="selectDir"
                          onDeleteDirectory="deleteDir"
                          onRenameDirectory="renameDir"
                          onCreateDirectory="createDir"
                          onDragAndDropDirectory="dragAndDropDir">
                </TreeView>
            </div>
        </div>
    </div>


@code {

    List<DirectoryVM> directories;
    string filePath { get; set; }
    BSModal ConfirmationModal;
    BSModal UploadModal;
    FileVM currentFile { get; set; }
    DirectoryVM currentDir { get; set; }
    bool isFolder { get; set; } = true;
    Upload myUpload;
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            RefreshUI();
        }
    }

    void RefreshUI()
    {
        var vm = fileManagerService.getTreeData();
        directories = vm.tree;
        currentDir = vm.tree[0];
        StateHasChanged();
    }

    /*File management */

    void selectFile(FileVM file)
    {
        isFolder = false;
        currentFile = file;
    }

    void selectDir(DirectoryVM dir)
    {
        isFolder = true;
        currentDir = dir;
    }

    void deleteFile(FileVM file)
    {
        fileManagerService.deleteFile(file.fullName);
        file.showMenu = false;
        file.isDeleted = true;
        StateHasChanged();        
    }

    void prepareRenameFile(FileVM file)
    {
        file.isRename = !file.isRename;
        file.renameFile = file.name;
    }

    void renameFile(FileVM file)
    {
        fileManagerService.renameFile(file);
        file.name = file.renameFile;
        file.isRename = false;
        RefreshUI();
    }

    async Task downloadFile(FileVM file)
    {
        await JsRuntime.InvokeAsync<Task>("filemanager.NavigateTo", $"/FileManager/Download?fileName={WebUtility.UrlEncode(file.fullName)}");
    }

    void uploadFile(DirectoryVM dir)
    {
        filePath = dir.fullName;
        UploadModal.Show();
    }


    void finishUpload(List<string> files)
    {
        UploadModal.Hide();
        toastService.ShowSuccess("Your files were successfully uploaded!", "Information");
        RefreshUI();
        myUpload = null;
    }

    void dragAndDropFile(FilesVM vm)
    {
        fileManagerService.MoveFile(vm.origFile, vm.destFile);
        RefreshUI();

    }

    /*Folder Management */

    void deleteDir(DirectoryVM dir)
    {
        currentDir = dir;
        dir.showMenu = false;
        ConfirmationModal.Show();
    }

    void DeleteConfirm()
    {
        ConfirmationModal.Hide();
        fileManagerService.deleteDirectory(currentDir.fullName);
        currentDir.isDeleted = true;
        StateHasChanged();        
    }

    void prepareRenameDir(DirectoryVM dir)
    {
        dir.isRename = !dir.isRename;
        dir.renameDir = dir.name;
    }

    void renameDir(DirectoryVM dir)
    {
        fileManagerService.renameDir(dir);
        RefreshUI();
    }

    void prepareCreateDir(DirectoryVM dir)
    {
        dir.isCreate = !dir.isCreate;
    }

    void createDir(DirectoryVM dir)
    {
        var path = Path.Combine(dir.fullName, dir.createDir);
        if (!Directory.Exists(path))
        {
            fileManagerService.createDir(dir);
            RefreshUI();
        }
        else
            toastService.ShowError("Thanks for selecting a valid directory !", "Information");
    }

   void dragAndDropDir(DirectoriesVM vm)
    {
        fileManagerService.dragAndDropDir(vm);
        RefreshUI();
    }

}
